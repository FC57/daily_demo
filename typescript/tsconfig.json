{
  "files": [], // 指定编译的特定文件
  // 编译选项
  "compilerOptions": {
    // 校验相关
    "strict": true, // 启用所有严格类型检查
    // "alwaysStrict" :false,// 启用严格模式，为每个文件添加 "use strict"
    // "noImplicitAny": false, // 禁止隐式的 any 类型
    "strictNullChecks": true, // 确保处理 null 和 undefined，减少潜在的运行时错误
    // "strictFunctionTypes": false,// 确保函数参数和返回值类型严格匹配
    "strictBindCallApply": true, // 确保 bind、call 和 apply 的参数符合函数签名的要求
    "strictPropertyInitialization": true, // 防止类属性在实例化时未被正确初始化
    "noImplicitThis": false, // 确保 this 的使用有明确的类型声明

    // 模块解析相关
    "noEmit": true, // 用于仅进行类型检查而不生成输出文件，比如在测试代码时
    "allowImportingTsExtensions": true, // 允许在 import 语句中使用 .ts 和 .tsx 扩展名
    "noUnusedLocals": true, // 禁止存在未使用的局部变量
    "noUnusedParameters": true, // 禁止存在未使用的函数参数
    // "noFallthroughCasesInSwitch": false, // 防止在 switch 语句中遗漏 break 语句，从而减少潜在的逻辑错误

    "skipLibCheck": true, // 跳过库文件的类型检查
    "target": "ES2016", // 编译目标代码的版本标准
    "module": "ESNext", // 编译结果的模块化标准
    "moduleResolution": "Bundler", // 模块解析的模式，Node - node查找策略；bundler - ts@4.7+推荐使用，与打包工具(webpack、esbuild、rollup)配合
    "lib": ["esnext", "dom"], // 编译时包含的库文件
    "resolveJsonModule": true, // 允许导入 JSON 文件作为模块
    "esModuleInterop": true, // 允许与CommonJS模块互操作
    "isolatedModules": true, // 确保 TypeScript 编译器和 Babel（或其他类似工具）之间的兼容性，特别是在使用单独编译模块时
    "jsx": "preserve", // 指定自定义的 JSX 工厂函数库，用于处理 JSX 代码的转换：react（react@18以下）;react-jsx（react@18）
    "jsxImportSource": "vue" // 保留 JSX 代码，不进行转换。这通常用于与 Babel 等工具链配合使用
    // "forceConsistentCasingInFileNames": false // 强制文件名一致性
    // "useDefineForClassFields": false // 控制类字段的编译方式，指定是否使用 define 语法，确保类字段的行为符合最新的 ECMAScript 标准
  },
  // 更精细的控制，指定项目间的依赖关系，明确主项目依赖于哪些子项目或模块，帮助 TypeScript 确定编译顺序，确保依赖项先编译
  // 实现增量编译，提升效率
  "references": [
    {
      "path": "./tsconfig.node.json" // node 环境
    },
    {
      "path": "./tsconfig.app.json" // 浏览器环境
    }
  ]
}
